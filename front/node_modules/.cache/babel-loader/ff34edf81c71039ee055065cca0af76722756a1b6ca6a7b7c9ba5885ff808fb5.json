{"ast":null,"code":"var _jsxFileName = \"/app/src/Login/Components/Auth/QRCode/QrCode.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport QRCodeSVG from 'qrcode.react';\nimport axios from 'axios';\nimport './QrCode.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QrCode = () => {\n  _s();\n  const [qrCodeUrl, setQrCodeUrl] = useState('');\n  useEffect(() => {\n    async function fetchQR() {\n      try {\n        const {\n          data\n        } = await axios.post('http://localhost:3333/auth/2fa/setup', {}, {\n          withCredentials: true\n        });\n        setQrCodeUrl(data.otpAuthUrl);\n      } catch (error) {\n        alert('2FA already enabled');\n      }\n    }\n    fetchQR();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"qrcode-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(QRCodeSVG, {\n      value: qrCodeUrl,\n      bgColor: \"#F9DA49\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Scan the QR Code\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), \"This will generate a code that you will have to fill bellow\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n};\n_s(QrCode, \"qPpTlMygO8ZQa+6RzXKUhkTbLH8=\");\n_c = QrCode;\nexport default QrCode;\nvar _c;\n$RefreshReg$(_c, \"QrCode\");","map":{"version":3,"names":["React","useEffect","useState","QRCodeSVG","axios","jsxDEV","_jsxDEV","QrCode","_s","qrCodeUrl","setQrCodeUrl","fetchQR","data","post","withCredentials","otpAuthUrl","error","alert","className","children","value","bgColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/src/Login/Components/Auth/QRCode/QrCode.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport QRCodeSVG from 'qrcode.react';\nimport axios from 'axios';\nimport './QrCode.css';\n\nconst QrCode = () => {\n\tconst [qrCodeUrl, setQrCodeUrl] = useState('');\n\n\tuseEffect(() => {\n\t\tasync function fetchQR() {\n\t\t\ttry {\n\t\t\t\tconst { data } = await axios.post(\n\t\t\t\t\t'http://localhost:3333/auth/2fa/setup',\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\twithCredentials: true,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tsetQrCodeUrl(data.otpAuthUrl);\n\t\t\t} catch (error) {\n\t\t\t\talert('2FA already enabled');\n\t\t\t}\n\t\t}\n\t\tfetchQR();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"qrcode-wrapper\">\n\t\t\t<QRCodeSVG value={qrCodeUrl} bgColor=\"#F9DA49\" />\n\t\t\t<p>\n\t\t\t\tScan the QR Code<br></br>This will generate a code that you will\n\t\t\t\thave to fill bellow\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n\nexport default QrCode;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACf,eAAeU,OAAOA,CAAA,EAAG;MACxB,IAAI;QACH,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMR,KAAK,CAACS,IAAI,CAChC,sCAAsC,EACtC,CAAC,CAAC,EACF;UACCC,eAAe,EAAE;QAClB,CAAC,CACD;QACDJ,YAAY,CAACE,IAAI,CAACG,UAAU,CAAC;MAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACfC,KAAK,CAAC,qBAAqB,CAAC;MAC7B;IACD;IACAN,OAAO,EAAE;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,oBACCL,OAAA;IAAKY,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC9Bb,OAAA,CAACH,SAAS;MAACiB,KAAK,EAAEX,SAAU;MAACY,OAAO,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACjDnB,OAAA;MAAAa,QAAA,GAAG,kBACc,eAAAb,OAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,+DAE1B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACC;AAER,CAAC;AAACjB,EAAA,CA9BID,MAAM;AAAAmB,EAAA,GAANnB,MAAM;AAgCZ,eAAeA,MAAM;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}