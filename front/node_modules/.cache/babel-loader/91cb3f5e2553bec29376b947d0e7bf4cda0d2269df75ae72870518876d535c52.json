{"ast":null,"code":"export const inputProtectionPseudo = (input, usernames) => {\n  const regexLetters = /^[a-zA-Z0-9_]+$/;\n  if (!regexLetters.test(input)) return 'Bad characters';\n  const regexLenght = /^.{3,7}$/;\n  if (!regexLenght.test(input)) return 'Bad length';\n  for (let i = 0; i < usernames.length; i++) {\n    if (usernames[i].username === input) return 'Username already taken';\n  }\n  return '';\n};\nexport const inputProtectionQR = input => {\n  const regexQR = /^\\d*(?:\\s?\\d\\s?)*$/; // 0-9, space, max 3 spaces\n  if (!regexQR.test(input)) return 'Bad input';\n  return '';\n};\nexport const inputProtectionChannel = input => {\n  const regexChannel = /^[a-zA-Z]+$/;\n  if (!regexChannel.test(input)) return false;\n  const regexLenght = /^.{3,8}$/;\n  if (!regexLenght.test(input)) return false;\n  return true;\n};\nexport const inputProtectionPassword = input => {\n  const regexChannel = /^[a-zA-Z0-9_]+$/;\n  if (!regexChannel.test(input)) return false;\n  const regexLenght = /^.{3, 20}$/;\n  if (!regexLenght.test(input)) return false;\n  return true;\n};","map":{"version":3,"names":["inputProtectionPseudo","input","usernames","regexLetters","test","regexLenght","i","length","username","inputProtectionQR","regexQR","inputProtectionChannel","regexChannel","inputProtectionPassword"],"sources":["/app/src/Login/Components/Auth/Input/inputProtection.ts"],"sourcesContent":["export const inputProtectionPseudo = (\n\tinput: string,\n\tusernames: any[]\n): string => {\n\tconst regexLetters = /^[a-zA-Z0-9_]+$/;\n\tif (!regexLetters.test(input)) return 'Bad characters';\n\tconst regexLenght = /^.{3,7}$/;\n\tif (!regexLenght.test(input)) return 'Bad length';\n\tfor (let i = 0; i < usernames.length; i++) {\n\t\tif (usernames[i].username === input) return 'Username already taken';\n\t}\n\treturn '';\n};\n\nexport const inputProtectionQR = (input: string): string => {\n\tconst regexQR = /^\\d*(?:\\s?\\d\\s?)*$/; // 0-9, space, max 3 spaces\n\tif (!regexQR.test(input)) return 'Bad input';\n\treturn '';\n};\n\nexport const inputProtectionChannel = (input: string): boolean => {\n\tconst regexChannel = /^[a-zA-Z]+$/;\n\tif (!regexChannel.test(input)) return false;\n\tconst regexLenght = /^.{3,8}$/;\n\tif (!regexLenght.test(input)) return false;\n\treturn true;\n};\n\nexport const inputProtectionPassword = (input: string): boolean => {\n\tconst regexChannel = /^[a-zA-Z0-9_]+$/;\n\tif (!regexChannel.test(input)) return false;\n\tconst regexLenght = /^.{3, 20}$/;\n\tif (!regexLenght.test(input)) return false;\n\treturn true;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAGA,CACpCC,KAAa,EACbC,SAAgB,KACJ;EACZ,MAAMC,YAAY,GAAG,iBAAiB;EACtC,IAAI,CAACA,YAAY,CAACC,IAAI,CAACH,KAAK,CAAC,EAAE,OAAO,gBAAgB;EACtD,MAAMI,WAAW,GAAG,UAAU;EAC9B,IAAI,CAACA,WAAW,CAACD,IAAI,CAACH,KAAK,CAAC,EAAE,OAAO,YAAY;EACjD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1C,IAAIJ,SAAS,CAACI,CAAC,CAAC,CAACE,QAAQ,KAAKP,KAAK,EAAE,OAAO,wBAAwB;EACrE;EACA,OAAO,EAAE;AACV,CAAC;AAED,OAAO,MAAMQ,iBAAiB,GAAIR,KAAa,IAAa;EAC3D,MAAMS,OAAO,GAAG,oBAAoB,CAAC,CAAC;EACtC,IAAI,CAACA,OAAO,CAACN,IAAI,CAACH,KAAK,CAAC,EAAE,OAAO,WAAW;EAC5C,OAAO,EAAE;AACV,CAAC;AAED,OAAO,MAAMU,sBAAsB,GAAIV,KAAa,IAAc;EACjE,MAAMW,YAAY,GAAG,aAAa;EAClC,IAAI,CAACA,YAAY,CAACR,IAAI,CAACH,KAAK,CAAC,EAAE,OAAO,KAAK;EAC3C,MAAMI,WAAW,GAAG,UAAU;EAC9B,IAAI,CAACA,WAAW,CAACD,IAAI,CAACH,KAAK,CAAC,EAAE,OAAO,KAAK;EAC1C,OAAO,IAAI;AACZ,CAAC;AAED,OAAO,MAAMY,uBAAuB,GAAIZ,KAAa,IAAc;EAClE,MAAMW,YAAY,GAAG,iBAAiB;EACtC,IAAI,CAACA,YAAY,CAACR,IAAI,CAACH,KAAK,CAAC,EAAE,OAAO,KAAK;EAC3C,MAAMI,WAAW,GAAG,YAAY;EAChC,IAAI,CAACA,WAAW,CAACD,IAAI,CAACH,KAAK,CAAC,EAAE,OAAO,KAAK;EAC1C,OAAO,IAAI;AACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}