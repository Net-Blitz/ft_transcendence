{"ast":null,"code":"var _jsxFileName = \"/app/src/Messagerie/Channel/ChannelsUtils.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { selectUserData } from '../../utils/redux/selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChannelsContext = /*#__PURE__*/createContext({\n  messages: [],\n  setMessages: () => {},\n  SaveChannel: [],\n  setSaveChannel: () => {},\n  ChannelList: [],\n  setChannelList: () => {},\n  selectedChannel: {\n    id: 0,\n    name: '',\n    state: '',\n    ownerId: 0\n  },\n  setSelectedChannel: () => {},\n  usersList: [],\n  setUsersList: () => {},\n  isAdmin: false\n});\nexport const ChannelsProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [SaveChannel, setSaveChannel] = useState([]);\n  const [ChannelList, setChannelList] = useState([]);\n  const [selectedChannel, setSelectedChannel] = useState({\n    id: 0,\n    name: '',\n    state: '',\n    ownerId: 0\n  });\n  const [usersList, setUsersList] = useState([]);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const userConnected = useSelector(selectUserData);\n  useEffect(() => {\n    const fetchChats = async () => {\n      try {\n        const Channels = await axios.get('http://localhost:3333/chat/channels', {\n          withCredentials: true\n        });\n        setChannelList(Channels.data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const getUsers = async () => {\n      if (!selectedChannel.name) return;\n      try {\n        const response = await axios.get('http://localhost:3333/chat/channel/' + selectedChannel.name, {\n          withCredentials: true\n        });\n        setUsersList(response.data.users);\n        setIsAdmin(false);\n        if (selectedChannel.ownerId === userConnected.id) {\n          setIsAdmin(true);\n        } else {\n          response.data.users.forEach(user => {\n            if (user.id === userConnected.id && user.role === 'admin') {\n              setIsAdmin(true);\n            }\n          });\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const fetchAll = async () => {\n      await fetchChats();\n      await getUsers();\n    };\n    fetchAll();\n    const interval = setInterval(fetchAll, 2500);\n    return () => clearInterval(interval);\n  }, [selectedChannel.name, selectedChannel.ownerId, setChannelList, userConnected.id]);\n  return /*#__PURE__*/_jsxDEV(ChannelsContext.Provider, {\n    value: {\n      messages,\n      setMessages,\n      SaveChannel,\n      setSaveChannel,\n      ChannelList,\n      setChannelList,\n      selectedChannel,\n      setSelectedChannel,\n      usersList,\n      setUsersList,\n      isAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 3\n  }, this);\n};\n_s(ChannelsProvider, \"oVKpzgp4+kfZCS9kZP+8m3KGE0o=\", false, function () {\n  return [useSelector];\n});\n_c = ChannelsProvider;\nvar _c;\n$RefreshReg$(_c, \"ChannelsProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","axios","useSelector","selectUserData","jsxDEV","_jsxDEV","ChannelsContext","messages","setMessages","SaveChannel","setSaveChannel","ChannelList","setChannelList","selectedChannel","id","name","state","ownerId","setSelectedChannel","usersList","setUsersList","isAdmin","ChannelsProvider","_ref","_s","children","setIsAdmin","userConnected","fetchChats","Channels","get","withCredentials","data","error","console","getUsers","response","users","forEach","user","role","fetchAll","interval","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/src/Messagerie/Channel/ChannelsUtils.tsx"],"sourcesContent":["import { ReactNode, createContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { selectUserData } from '../../utils/redux/selectors';\n\nexport interface ChannelDto {\n\tid: number;\n\tname: string;\n\tstate: string;\n\townerId: number;\n}\n\nexport interface userInfoDto {\n\tid: number;\n\tusername: string;\n\tavatar: string;\n\trole?: string;\n}\n\nexport interface MessageDto {\n\tusername: string;\n\tcontent: string;\n\tavatar: string;\n\tcreatedAt: string;\n}\n\ntype ChannelsContextType = {\n\tmessages: MessageDto[];\n\tsetMessages: React.Dispatch<React.SetStateAction<MessageDto[]>>;\n\tSaveChannel: ChannelDto[];\n\tsetSaveChannel: React.Dispatch<React.SetStateAction<ChannelDto[]>>;\n\tChannelList: ChannelDto[];\n\tsetChannelList: React.Dispatch<React.SetStateAction<ChannelDto[]>>;\n\tselectedChannel: ChannelDto;\n\tsetSelectedChannel: React.Dispatch<React.SetStateAction<ChannelDto>>;\n\tusersList: userInfoDto[];\n\tsetUsersList: React.Dispatch<React.SetStateAction<userInfoDto[]>>;\n\tisAdmin: boolean;\n};\n\nexport const ChannelsContext = createContext<ChannelsContextType>({\n\tmessages: [],\n\tsetMessages: () => {},\n\tSaveChannel: [],\n\tsetSaveChannel: () => {},\n\tChannelList: [],\n\tsetChannelList: () => {},\n\tselectedChannel: { id: 0, name: '', state: '', ownerId: 0 },\n\tsetSelectedChannel: () => {},\n\tusersList: [],\n\tsetUsersList: () => {},\n\tisAdmin: false,\n});\n\nexport const ChannelsProvider = ({ children }: { children: ReactNode }) => {\n\tconst [messages, setMessages] = useState<MessageDto[]>([]);\n\tconst [SaveChannel, setSaveChannel] = useState<ChannelDto[]>([]);\n\tconst [ChannelList, setChannelList] = useState<ChannelDto[]>([]);\n\tconst [selectedChannel, setSelectedChannel] = useState<ChannelDto>({\n\t\tid: 0,\n\t\tname: '',\n\t\tstate: '',\n\t\townerId: 0,\n\t});\n\tconst [usersList, setUsersList] = useState<userInfoDto[]>([]);\n\tconst [isAdmin, setIsAdmin] = useState(false);\n\tconst userConnected = useSelector(selectUserData);\n\n\tuseEffect(() => {\n\t\tconst fetchChats = async () => {\n\t\t\ttry {\n\t\t\t\tconst Channels = await axios.get<ChannelDto[]>(\n\t\t\t\t\t'http://localhost:3333/chat/channels',\n\t\t\t\t\t{ withCredentials: true }\n\t\t\t\t);\n\t\t\t\tsetChannelList(Channels.data);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t};\n\t\tconst getUsers = async () => {\n\t\t\tif (!selectedChannel.name) return;\n\t\t\ttry {\n\t\t\t\tconst response = await axios.get(\n\t\t\t\t\t'http://localhost:3333/chat/channel/' +\n\t\t\t\t\t\tselectedChannel.name,\n\t\t\t\t\t{ withCredentials: true }\n\t\t\t\t);\n\t\t\t\tsetUsersList(response.data.users);\n\t\t\t\tsetIsAdmin(false);\n\t\t\t\tif (selectedChannel.ownerId === userConnected.id) {\n\t\t\t\t\tsetIsAdmin(true);\n\t\t\t\t} else {\n\t\t\t\t\tresponse.data.users.forEach((user: userInfoDto) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tuser.id === userConnected.id &&\n\t\t\t\t\t\t\tuser.role === 'admin'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tsetIsAdmin(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t};\n\t\tconst fetchAll = async () => {\n\t\t\tawait fetchChats();\n\t\t\tawait getUsers();\n\t\t};\n\t\tfetchAll();\n\t\tconst interval = setInterval(fetchAll, 2500);\n\t\treturn () => clearInterval(interval);\n\t}, [\n\t\tselectedChannel.name,\n\t\tselectedChannel.ownerId,\n\t\tsetChannelList,\n\t\tuserConnected.id,\n\t]);\n\n\treturn (\n\t\t<ChannelsContext.Provider\n\t\t\tvalue={{\n\t\t\t\tmessages,\n\t\t\t\tsetMessages,\n\t\t\t\tSaveChannel,\n\t\t\t\tsetSaveChannel,\n\t\t\t\tChannelList,\n\t\t\t\tsetChannelList,\n\t\t\t\tselectedChannel,\n\t\t\t\tsetSelectedChannel,\n\t\t\t\tusersList,\n\t\t\t\tsetUsersList,\n\t\t\t\tisAdmin,\n\t\t\t}}>\n\t\t\t{children}\n\t\t</ChannelsContext.Provider>\n\t);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}